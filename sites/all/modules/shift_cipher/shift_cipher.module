<?php

    function shift_cipher_menu() {
        $items = array();
        $items['shift_cipher'] = array(
            'title' => 'Shift Cipher',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('shift_cipher_form'),
            'access callback' => TRUE,
            'type' => MENU_NORMAL_ITEM,
        );
        $items['shift_cipher_success_page'] = array(
            'title' => 'Encoded Message',
            'page callback' => 'shift_cipher_success',
            'access callback' => TRUE,
            'type' => MENU_CALLBACK,
        );
        return $items;
    }

    /* Creates shift_cipher input form */
    function shift_cipher_form() {
        $form['phrase'] = array(
            '#title' => 'Unencoded Phrase',
            '#type' => 'textfield',
            '#description' => t('Enter a phrase to be encoded.'),
            '#required' => TRUE,
            '#element_validate' => array('shift_cipher_validate_phrase'),
        );
        $form['direction'] = array(
            '#title' => 'Shift Direction',
            '#type' => 'textfield',
            '#description' => t('Enter a direction to shift your message (either "left" or "right").'),
            '#required' => TRUE,
            '#element_validate' => array('shift_cipher_validate_direction'),
        );
        $form['shift_value'] = array(
            '#title' => 'Shift Value',
            '#type' => 'textfield',
            '#description' => t('Input a number between 1 and 26 to shift your message by.'),
            '#required' => TRUE,
            '#element_validate' => array('element_validate_integer_positive', 'shift_cipher_validate_range'),
        );
        $form['submit'] = array(
            '#type' => 'submit',
            '#value' => 'Encode',
        );
        return $form;
    }

    /* Removes trailing whitespace and makes sure that inputted string only contains letters and approved punctuation */
    function shift_cipher_validate_phrase($element) {
        $input = rtrim($element['#value'], " ");
        if(!preg_match_all("/^[A-Za-z!?,.'\"]/", $input)) {
            form_error($element, t('Please enter a valid phrase containing only letters, spaces, and the following punctuation: ? ! , . \' "'));
        }
    }

    /* Removes trailing whitespace and makes sure that user has only entered "left" or "right" as direction */
    function shift_cipher_validate_direction($element) {
        $valid_directions = ['left', 'right'];
        $input = rtrim($element['#value'], " ");
        if(!in_array(strtolower($input), $valid_directions)) {
            form_error($element, t('Please enter either "left" or "right".'));
        }
    }

    /* Makes sure that the user inputted shift value is more than 0 and less than 26 (as those values would result in no shifting) */
    function shift_cipher_validate_range($element) {
        if($element['#value'] < 1 || $element['#value'] > 25) {
            form_error($element, t('Please enter a number between 1 and 25.'));
        }
    }

    function shift_cipher_form_submit($form, &$form_state) {
        /* Get input values from form */
        $input_string = $form_state['values']['phrase'];
        $shift_value = $form_state['values']['shift_value'];
        $direction = $form_state['values']['direction'];

        $alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];
        $punctuation = ['!', '?', ',', '\'', '"', '.'];

        /* Breaks input string into an array of words so we can handle each word individually */
        $input_string_array = explode(" ", strtolower($input_string));
        $output_array = array();

        foreach($input_string_array as $word) {
            $output_word = ""; //Empty string to add result of letter shifting.

            for($i = 0; $i < strlen($word); $i++) { //Loops through all letters in word
                /* If current character is contained in the punctuation array declared above, add it to the output string. */
                if(in_array($word[$i], $punctuation)) {
                    $output_word .= $word[$i];
                } else {
                    /* If current character is a letter, find the index position of the letter in the alphabet array, to serve as starting point. */
                    $start_position = array_search($word[$i], $alphabet);

                    if($direction === 'left') {
                        $relative_position = $start_position - $shift_value;
                        if($relative_position < 0) {
                            /* If relative_position is less than zero, this converts that negative value into a usable index by adding said negative value to 26. (e.g. "a" has an index of 0.  If we shift left one, 0 - 1 = -1, 26 + -1 = 25, meaning the encoded letter is the letter at $alphabet[25], which is "z".) Then we add that new letter to the $output_word string. */
                            $end_position = 26 + $relative_position;
                            $shifted_letter = $alphabet[$end_position];
                            $output_word .= $shifted_letter;
                        } else {
                            $shifted_letter = $alphabet[$relative_position];
                            $output_word .= $shifted_letter;
                        }
                    } else {
                        /* If we're shifting to the right, we add the $shift_value to our original $start_position. */
                        $relative_position = $start_position + $shift_value;
                        if($relative_position > 25) {
                            /* If $relative_position is larger than 25, we convert that to a usable index by setting the $end_position to the absolute value of 26 - $relative_position, i.e. how far past the 0th index we need to shift.  In our "looped" array, the "26th" index is the same as the 0th index. (e.g. "z" has an index of 25.  If we shift to the right by 4: 25 + 4 = 29; 26 - 29 = -3; the absolute value of -3 is 3.  The encoded letter = $alphabet[3], or "d".) */
                            $end_position = abs(26 - $relative_position);
                            $shifted_letter = $alphabet[$end_position];
                            $output_word .= $shifted_letter;
                        } else {
                            $shifted_letter = $alphabet[$relative_position];
                            $output_word .= $shifted_letter;
                        }
                    }
                }
            }
            /* Adds each encoded word to an array before moving on to the next and repeating the shift encoding process */
            array_push($output_array, $output_word);
        }

        /* Turns the encoded $output_array into a string. */
        $_SESSION['encoded_string'] = implode(" ", $output_array);
        $form_state['redirect'] = 'shift_cipher_success_page';
    }

    function shift_cipher_success() {
        $encoded_string = $_SESSION['encoded_string'];
        return "Here is your encoded message: $encoded_string";
    }
